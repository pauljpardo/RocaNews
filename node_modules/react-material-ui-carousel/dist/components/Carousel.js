"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Carousel = void 0;
var FiberManualRecord_1 = __importDefault(require("@mui/icons-material/FiberManualRecord"));
var NavigateBefore_1 = __importDefault(require("@mui/icons-material/NavigateBefore"));
var NavigateNext_1 = __importDefault(require("@mui/icons-material/NavigateNext"));
var react_1 = __importStar(require("react"));
var framer_motion_1 = require("framer-motion");
var styles_1 = require("@mui/styles");
var material_1 = require("@mui/material");
var styles = (0, styles_1.makeStyles)(function () { return (0, styles_1.createStyles)({
    root: {
        position: "relative",
        overflow: "hidden",
        // display: 'flex',
        // flexDirection: 'column'
    },
    item: {
        position: "absolute",
        // height: 'inherit',
        width: '100%',
        //    flexGrow: 1
    },
    itemWrapper: {
        position: 'relative',
        width: '100%',
        height: '100%',
    },
    indicators: {
        width: "100%",
        marginTop: "10px",
        textAlign: "center"
    },
    indicator: {
        cursor: "pointer",
        transition: "200ms",
        padding: 0,
        color: "#afafaf",
        '&:hover': {
            color: "#1f1f1f"
        },
        '&:active': {
            color: "#1f1f1f"
        }
    },
    indicatorIcon: {
        fontSize: "15px",
    },
    active: {
        color: "#494949",
    },
    buttonWrapper: {
        position: "absolute",
        height: "100px",
        backgroundColor: "transparent",
        zIndex: 1,
        top: "calc(50% - 70px)",
        '&:hover': {
            '& $button': {
                backgroundColor: "black",
                filter: "brightness(120%)",
                opacity: "0.4"
            }
        }
    },
    fullHeightHoverWrapper: {
        height: "100%",
        top: "0"
    },
    fullHeightHoverButton: {},
    buttonVisible: {
        opacity: "1"
    },
    buttonHidden: {
        opacity: "0",
    },
    button: {
        margin: "0 10px",
        position: "relative",
        backgroundColor: "#494949",
        top: "calc(50% - 20px) !important",
        color: "white",
        fontSize: "30px",
        transition: "200ms",
        cursor: "pointer",
        '&:hover': {
            opacity: "0.6 !important"
        },
    },
    next: {
        right: 0
    },
    prev: {
        left: 0
    }
}); });
;
var sanitizeNavProps = function (props) {
    var _a = props || {}, className = _a.className, style = _a.style, rest = __rest(_a, ["className", "style"]);
    return props !== undefined ? __assign({ style: props.style !== undefined ? props.style : {}, className: props.className !== undefined ? props.className : "" }, rest) : __assign({ style: {}, className: "" }, rest);
};
var sanitizeProps = function (props) {
    var animation = props.animation !== undefined ? props.animation : "fade";
    var duration = props.duration !== undefined ? props.duration : (animation === "fade" ? 500 : 200);
    return {
        className: props.className !== undefined ? props.className : "",
        children: props.children ? props.children : [],
        index: props.index !== undefined ? props.index : 0,
        strictIndexing: props.strictIndexing !== undefined ? props.strictIndexing : true,
        autoPlay: props.autoPlay !== undefined ? props.autoPlay : true,
        stopAutoPlayOnHover: props.stopAutoPlayOnHover !== undefined ? props.stopAutoPlayOnHover : true,
        interval: props.interval !== undefined ? props.interval : 4000,
        animation: animation,
        duration: duration,
        swipe: props.swipe !== undefined ? props.swipe : true,
        navButtonsAlwaysInvisible: props.navButtonsAlwaysInvisible !== undefined ? props.navButtonsAlwaysInvisible : false,
        navButtonsAlwaysVisible: props.navButtonsAlwaysVisible !== undefined ? props.navButtonsAlwaysVisible : false,
        cycleNavigation: props.cycleNavigation !== undefined ? props.cycleNavigation : true,
        fullHeightHover: props.fullHeightHover !== undefined ? props.fullHeightHover : true,
        navButtonsWrapperProps: sanitizeNavProps(props.navButtonsWrapperProps),
        navButtonsProps: sanitizeNavProps(props.navButtonsProps),
        NavButton: props.NavButton,
        NextIcon: props.NextIcon !== undefined ? props.NextIcon : react_1.default.createElement(NavigateNext_1.default, null),
        PrevIcon: props.PrevIcon !== undefined ? props.PrevIcon : react_1.default.createElement(NavigateBefore_1.default, null),
        indicators: props.indicators !== undefined ? props.indicators : true,
        indicatorContainerProps: sanitizeNavProps(props.indicatorContainerProps),
        indicatorIconButtonProps: sanitizeNavProps(props.indicatorIconButtonProps),
        activeIndicatorIconButtonProps: sanitizeNavProps(props.activeIndicatorIconButtonProps),
        IndicatorIcon: props.IndicatorIcon,
        onChange: props.onChange !== undefined ? props.onChange : function () { },
        changeOnFirstRender: props.changeOnFirstRender !== undefined ? props.changeOnFirstRender : false,
        next: props.next !== undefined ? props.next : function () { },
        prev: props.prev !== undefined ? props.prev : function () { },
    };
};
var Carousel = function (props) {
    var _a = (0, react_1.useState)({
        active: 0,
        prevActive: 0,
        next: true
    }), state = _a[0], setState = _a[1];
    var _b = (0, react_1.useState)(0), height = _b[0], setHeight = _b[1];
    var _c = (0, react_1.useState)(false), paused = _c[0], setPaused = _c[1];
    var classes = styles();
    var sanitizedProps = sanitizeProps(props);
    // componentDidMount
    (0, react_1.useEffect)(function () {
        var index = sanitizedProps.index, changeOnFirstRender = sanitizedProps.changeOnFirstRender;
        setNext(index, true, changeOnFirstRender);
    }, []);
    useInterval(function () {
        var autoPlay = sanitizedProps.autoPlay;
        if (autoPlay && !paused)
            next(undefined);
    }, sanitizedProps.interval);
    // Sets the Carousel's child to index when it (index) or all the children change
    (0, react_1.useEffect)(function () {
        setNext(sanitizedProps.index, true);
    }, [sanitizedProps.index, sanitizedProps.children]);
    var next = function (event) {
        var children = sanitizedProps.children, cycleNavigation = sanitizedProps.cycleNavigation;
        var last = Array.isArray(children) ? children.length - 1 : 0;
        var nextActive = state.active + 1 > last ? (cycleNavigation ? 0 : state.active) : state.active + 1;
        setNext(nextActive, true);
        if (event)
            event.stopPropagation();
    };
    var prev = function (event) {
        var children = sanitizedProps.children, cycleNavigation = sanitizedProps.cycleNavigation;
        var last = Array.isArray(children) ? children.length - 1 : 0;
        var nextActive = state.active - 1 < 0 ? (cycleNavigation ? last : state.active) : state.active - 1;
        setNext(nextActive, false);
        if (event)
            event.stopPropagation();
    };
    var setNext = function (index, isNext, runCallbacks) {
        if (runCallbacks === void 0) { runCallbacks = true; }
        var onChange = sanitizedProps.onChange, children = sanitizedProps.children, strictIndexing = sanitizedProps.strictIndexing;
        if (Array.isArray(children)) {
            if (strictIndexing && index > children.length - 1)
                index = children.length - 1;
            if (strictIndexing && index < 0)
                index = 0;
        }
        else {
            index = 0;
        }
        if (runCallbacks) {
            if (isNext !== undefined)
                isNext ? sanitizedProps.next(index, state.active) : sanitizedProps.prev(index, state.active);
            onChange(index, state.active);
        }
        if (isNext === undefined) {
            isNext = index > state.active;
        }
        setState({
            active: index,
            prevActive: state.active,
            next: isNext
        });
    };
    var children = sanitizedProps.children, className = sanitizedProps.className, stopAutoPlayOnHover = sanitizedProps.stopAutoPlayOnHover, animation = sanitizedProps.animation, duration = sanitizedProps.duration, swipe = sanitizedProps.swipe, navButtonsAlwaysInvisible = sanitizedProps.navButtonsAlwaysInvisible, navButtonsAlwaysVisible = sanitizedProps.navButtonsAlwaysVisible, cycleNavigation = sanitizedProps.cycleNavigation, fullHeightHover = sanitizedProps.fullHeightHover, navButtonsProps = sanitizedProps.navButtonsProps, navButtonsWrapperProps = sanitizedProps.navButtonsWrapperProps, NavButton = sanitizedProps.NavButton, NextIcon = sanitizedProps.NextIcon, PrevIcon = sanitizedProps.PrevIcon, indicators = sanitizedProps.indicators, indicatorContainerProps = sanitizedProps.indicatorContainerProps, indicatorIconButtonProps = sanitizedProps.indicatorIconButtonProps, activeIndicatorIconButtonProps = sanitizedProps.activeIndicatorIconButtonProps, IndicatorIcon = sanitizedProps.IndicatorIcon;
    var buttonsClass = navButtonsProps.className, buttonsStyle = navButtonsProps.style, buttonsProps = __rest(navButtonsProps, ["className", "style"]);
    var buttonsWrapperClass = navButtonsWrapperProps.className, buttonsWrapperStyle = navButtonsWrapperProps.style, buttonsWrapperProps = __rest(navButtonsWrapperProps, ["className", "style"]);
    var buttonVisibilityClassValue = "" + (navButtonsAlwaysVisible ? classes.buttonVisible : classes.buttonHidden);
    var buttonCssClassValue = classes.button + " " + buttonVisibilityClassValue + " " + (fullHeightHover ? classes.fullHeightHoverButton : "") + " " + buttonsClass;
    var buttonWrapperCssClassValue = classes.buttonWrapper + " " + (fullHeightHover ? classes.fullHeightHoverWrapper : "") + " " + buttonsWrapperClass;
    var showButton = function (next) {
        if (next === void 0) { next = true; }
        if (cycleNavigation)
            return true;
        var last = Array.isArray(children) ? children.length - 1 : 0;
        if (next && state.active === last)
            return false;
        if (!next && state.active === 0)
            return false;
        return true;
    };
    return (react_1.default.createElement("div", { className: classes.root + " " + (className ? className : ""), onMouseOver: function () { stopAutoPlayOnHover && setPaused(true); }, onMouseOut: function () { stopAutoPlayOnHover && setPaused(false); } },
        react_1.default.createElement("div", { className: classes.itemWrapper, style: { height: height } }, Array.isArray(children) ?
            children.map(function (child, index) {
                return (react_1.default.createElement(CarouselItem, { key: "carousel-item" + index, state: state, index: index, maxIndex: children.length - 1, child: child, animation: animation, duration: duration, swipe: swipe, next: next, prev: prev, setHeight: setHeight }));
            })
            :
                react_1.default.createElement(CarouselItem, { key: "carousel-item0", state: state, index: 0, maxIndex: 0, child: children, animation: animation, duration: duration, setHeight: setHeight })),
        !navButtonsAlwaysInvisible && showButton(true) &&
            react_1.default.createElement("div", __assign({ className: buttonWrapperCssClassValue + " " + classes.next, style: buttonsWrapperStyle }, buttonsWrapperProps), NavButton !== undefined ?
                NavButton(__assign({ onClick: next, className: buttonCssClassValue, style: buttonsStyle, next: true, prev: false }, buttonsProps))
                :
                    react_1.default.createElement(material_1.IconButton, __assign({ className: "" + buttonCssClassValue, onClick: next, "aria-label": "Next", style: buttonsStyle }, buttonsProps), NextIcon)),
        !navButtonsAlwaysInvisible && showButton(false) &&
            react_1.default.createElement("div", __assign({ className: buttonWrapperCssClassValue + " " + classes.prev, style: buttonsWrapperStyle }, buttonsWrapperProps), NavButton !== undefined ?
                NavButton(__assign({ onClick: prev, className: buttonCssClassValue, style: navButtonsProps.style, next: false, prev: true }, buttonsProps))
                :
                    react_1.default.createElement(material_1.IconButton, __assign({ className: "" + buttonCssClassValue, onClick: prev, "aria-label": "Previous", style: navButtonsProps.style }, buttonsProps), PrevIcon)),
        indicators ?
            react_1.default.createElement(Indicators, { length: Array.isArray(children) ? children.length : 0, active: state.active, press: setNext, indicatorContainerProps: indicatorContainerProps, indicatorIconButtonProps: indicatorIconButtonProps, activeIndicatorIconButtonProps: activeIndicatorIconButtonProps, IndicatorIcon: IndicatorIcon }) : null));
};
exports.Carousel = Carousel;
var CarouselItem = function (_a) {
    var animation = _a.animation, next = _a.next, prev = _a.prev, swipe = _a.swipe, state = _a.state, index = _a.index, maxIndex = _a.maxIndex, duration = _a.duration, child = _a.child, setHeight = _a.setHeight;
    var classes = styles();
    var slide = animation === 'slide';
    var fade = animation === 'fade';
    var active = state.active, isNext = state.next, prevActive = state.prevActive;
    var dragProps = {
        drag: 'x',
        layout: true,
        onDragEnd: function (event, info) {
            if (!swipe)
                return;
            if (info.offset.x > 0)
                prev && prev();
            else if (info.offset.x < 0)
                next && next();
            event.stopPropagation();
        },
        dragElastic: 0,
        dragConstraints: { left: 0, right: 0 }
    };
    var divRef = (0, react_1.useRef)(null);
    var handleResize = (0, react_1.useCallback)(function () {
        if (divRef.current && index === active)
            setHeight(divRef.current.clientHeight);
    }, [divRef, setHeight, index, active]);
    (0, react_1.useEffect)(function () {
        handleResize();
    }, []);
    // Do this check for SSR cases
    if (!(typeof window === 'undefined'))
        window.addEventListener('resize', handleResize);
    var variants = {
        leftwardExit: {
            x: slide ? '-100%' : undefined,
            opacity: fade ? 0 : undefined,
            zIndex: 0,
            // position: 'relative'
        },
        leftOut: {
            x: slide ? '-100%' : undefined,
            opacity: fade ? 0 : undefined,
            display: 'none',
            zIndex: 0,
            // position: 'relative'
        },
        rightwardExit: {
            x: slide ? '100%' : undefined,
            opacity: fade ? 0 : undefined,
            zIndex: 0,
            // position: 'relative'
        },
        rightOut: {
            x: slide ? '100%' : undefined,
            opacity: fade ? 0 : undefined,
            display: 'none',
            zIndex: 0,
            // position: 'relative'
        },
        center: {
            x: 0,
            opacity: 1,
            zIndex: 1,
            // position: 'relative'
        },
    };
    // Handle animation directions and opacity given based on active, prevActive and this item's index
    var animate = 'center';
    if (index === active)
        animate = 'center';
    else if (index === prevActive) {
        animate = isNext ? 'leftwardExit' : 'rightwardExit';
        if (active === maxIndex && index === 0)
            animate = 'rightwardExit';
        if (active === 0 && index === maxIndex)
            animate = 'leftwardExit';
    }
    else {
        animate = index < active ? 'leftOut' : 'rightOut';
        if (active === maxIndex && index === 0)
            animate = 'rightOut';
        if (active === 0 && index === maxIndex)
            animate = 'leftOut';
    }
    duration = duration / 1000;
    return (react_1.default.createElement("div", { className: classes.item, ref: divRef },
        react_1.default.createElement(framer_motion_1.AnimatePresence, { custom: isNext },
            react_1.default.createElement(framer_motion_1.motion.div, __assign({}, (swipe && dragProps)),
                react_1.default.createElement(framer_motion_1.motion.div, { custom: isNext, variants: variants, animate: animate, transition: {
                        x: { type: "tween", duration: duration, delay: 0 },
                        opacity: { duration: duration },
                    }, style: { position: 'relative' } }, child)))));
};
var Indicators = function (props) {
    var classes = styles();
    var IndicatorIcon = (0, react_1.useMemo)(function () { return props.IndicatorIcon !== undefined ? props.IndicatorIcon :
        react_1.default.createElement(FiberManualRecord_1.default, { className: classes.indicatorIcon }); }, [classes.indicatorIcon, props.IndicatorIcon]);
    var completeListIfRequired = (0, react_1.useCallback)(function (arrayOfIcons) {
        while (arrayOfIcons.length < props.length) {
            var index = 0;
            arrayOfIcons.push(arrayOfIcons[index]);
            index += 1;
        }
    }, [props.length]);
    var _a = props.indicatorIconButtonProps, indicatorIconButtonClass = _a.className, indicatorIconButtonStyle = _a.style, indicatorIconButtonProps = __rest(_a, ["className", "style"]);
    var _b = props.activeIndicatorIconButtonProps, activeIndicatorIconButtonClass = _b.className, activeIndicatorIconButtonStyle = _b.style, activeIndicatorIconButtonProps = __rest(_b, ["className", "style"]);
    var indicators = [];
    var _loop_1 = function (i) {
        var className = i === props.active ?
            classes.indicator + " " + indicatorIconButtonClass + " " + classes.active + " " + activeIndicatorIconButtonClass :
            classes.indicator + " " + indicatorIconButtonClass;
        var style = i === props.active ?
            Object.assign({}, indicatorIconButtonStyle, activeIndicatorIconButtonStyle) :
            indicatorIconButtonStyle;
        var restProps = i === props.active ?
            Object.assign({}, indicatorIconButtonProps, activeIndicatorIconButtonProps) :
            indicatorIconButtonProps;
        if (restProps['aria-label'] === undefined)
            restProps['aria-label'] = 'carousel indicator';
        var createIndicator = function (IndicatorIcon) {
            return (react_1.default.createElement(material_1.IconButton, __assign({ key: i, className: className, style: style, onClick: function () { props.press(i); } }, restProps, { "aria-label": restProps['aria-label'] + " " + (i + 1) }), IndicatorIcon));
        };
        Array.isArray(IndicatorIcon)
            ? indicators.push(createIndicator(IndicatorIcon[i])) && completeListIfRequired(IndicatorIcon)
            : indicators.push(createIndicator(IndicatorIcon));
    };
    for (var i = 0; i < props.length; i++) {
        _loop_1(i);
    }
    var _c = props.indicatorContainerProps, indicatorContainerClass = _c.className, indicatorContainerStyle = _c.style, indicatorContainerProps = __rest(_c, ["className", "style"]);
    return (react_1.default.createElement("div", __assign({ className: classes.indicators + " " + indicatorContainerClass, style: indicatorContainerStyle }, indicatorContainerProps), indicators));
};
var useInterval = function (callback, delay) {
    var savedCallback = (0, react_1.useRef)(function () { });
    // Remember the latest callback.
    (0, react_1.useEffect)(function () {
        savedCallback.current = callback;
    }, [callback]);
    // Set up the interval.
    (0, react_1.useEffect)(function () {
        function tick() {
            savedCallback.current();
        }
        if (delay !== null) {
            var id_1 = setInterval(tick, delay);
            return function () { return clearInterval(id_1); };
        }
        return function () { };
    }, [delay]);
};
exports.default = exports.Carousel;
